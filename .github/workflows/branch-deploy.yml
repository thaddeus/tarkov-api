name: branch-deploy

on:
  issue_comment:
    types: [ created ]


permissions:
  # Permissions needed for reacting and adding comments for IssueOps commands
  pull-requests: write
  deployments: write
  contents: write
  checks: read
  # Permissions needed for building and deploying docker images
  packages: write
  # contents: read
  attestations: write
  id-token: write

env:
  # Environment variables used by docker build and push
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    environment: secrets
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest

    steps:
      - uses: github/branch-deploy@v9.3.0
        id: branch-deploy
        with:
          admins: the-hideout/core-contributors
          admins_pat: ${{ secrets.BRANCH_DEPLOY_ADMINS_PAT }}
          environment_targets: production,development
          environment_urls: production|https://api.tarkov.dev/graphql,development|https://dev-api.tarkov.dev/graphql
          sticky_locks: "true"

      - name: checkout
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.branch-deploy.outputs.ref }}

      - name: Log in to the Container registry
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: docker-meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image to registry
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        id: docker-push
        uses: docker/build-push-action@v6.3.0
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
      
      - name: Generate artifact attestation
        if: ${{ steps.branch-deploy.outputs.continue == 'true' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.docker-push.outputs.digest }}
          push-to-registry: true
      
      # Setup SSH agent
      - if: ${{ steps.branch-deploy.outputs.continue == 'true' &&
          steps.branch-deploy.outputs.noop != 'true' }}
        id: setup-ssh
        env:
          # Sets up the ssh agent to be used in future steps for connecting to the deployment environment
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          # Sets the ssh host address based on the desired environment if they differ, falling back to SSH_HOST
          ENV_HOST: ${{ steps.branch-deploy.outputs.environment == 'production' && secrets.SSH_HOST_PROD || secrets.SSH_HOST_DEV || secrets.SSH_HOST }}
        run: |
          mkdir -p /home/runner/.ssh
          ssh-keyscan $ENV_HOST >> /home/runner/.ssh/known_hosts
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /home/runner/.ssh/api-server-key
          chmod 600 /home/runner/.ssh/api-server-key
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add /home/runner/.ssh/api-server-key
          echo "ssh-host=$ENV_HOST" >> $GITHUB_OUTPUT

      - name: Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' &&
          steps.branch-deploy.outputs.noop != 'true'}}
        env:
            # Uses the ssh agent set up in the previous step to connect to the deployment environment
            SSH_AUTH_SOCK: /tmp/ssh_agent.sock
            # Allows for the API to be deployed to the same system on different ports based on the environment
            ENV_PORT: ${{ steps.branch-deploy.outputs.environment == 'production' && '80' || '8088' }}
            # The name of the container to be run
            CONTAINER_NAME: tarkov-api-${{ steps.branch-deploy.outputs.environment }}
        run: |
          # Stop and remove any existing container matching our container name variable
          ssh ${{ secrets.SSH_USER }}@${{ steps.setup-ssh.outputs.ssh-host }} "sudo docker rm -f ${{ env.CONTAINER_NAME }} || true"
          # Pull the latest version of the image published to the registry
          ssh ${{ secrets.SSH_USER }}@${{ steps.setup-ssh.outputs.ssh-host }} "sudo docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:${{ steps.meta.outputs.tags[0] }}"
          # Run the image as a container
          ssh ${{ secrets.SSH_USER }}@${{ steps.setup-ssh.outputs.ssh-host }} "sudo docker run -d --name ${{ env.CONTAINER_NAME }} - -p ${{ env.ENV_PORT }}:8088 -e CLOUDFLARE_TOKEN='${{ secrets.CLOUDFLARE_TOKEN }}' -e CACHE_BASIC_AUTH='${{ secrets.CACHE_BASIC_AUTH }}' ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags[0] }}"

      # Post comment on PR with development deploy info
      - uses: GrantBirki/comment@v2.0.10
        if: ${{ steps.branch-deploy.outputs.continue == 'true' &&
          steps.branch-deploy.outputs.noop != 'true' &&
          steps.branch-deploy.outputs.environment == 'development' }}
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### API Deployment - Development 🪐

            The API has been **deployed** to the **development** environment 🚀

            - Endpoint: `dev-api.tarkov.dev/graphql`
            - Playground: [dev-api.tarkov.dev](https://dev-api.tarkov.dev)

            > Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Workflow: `${{ github.workflow }}`;

      - name: Publish - Production
        if: ${{ steps.branch-deploy.outputs.continue == 'true' &&
          steps.branch-deploy.outputs.noop != 'true' &&
          steps.branch-deploy.outputs.environment == 'production' }}
        uses: cloudflare/wrangler-action@a08dc762e87e8754e0d56a16a35a70b406bc869f # pin@3.6.1
        with:
          wranglerVersion: '2.17.0'
          apiToken: ${{ secrets.CF_API_TOKEN }}

      # Post comment on PR with production deploy info
      - uses: GrantBirki/comment@v2.0.10
        if: ${{ steps.branch-deploy.outputs.continue == 'true' &&
          steps.branch-deploy.outputs.noop != 'true' &&
          steps.branch-deploy.outputs.environment == 'production' }}
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ### API Deployment - Production 🌔

            The API has been **deployed** to the **production** environment 🚀

            - Endpoint: `api.tarkov.dev/graphql`
            - Playground: [api.tarkov.dev](https://api.tarkov.dev)

            > Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Workflow: `${{ github.workflow }}`;
